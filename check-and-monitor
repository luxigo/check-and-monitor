#!/bin/bash
#    check-and-monitor - check and monitor connections or anything
#
#    Copyright (C) 2021-2025 luc.deschenaux@freesurf.ch
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

timeout=10
interval=60
failures=0
failures_threshold=3
successes=0
successes_threshold=0
hasfailed=dunno
notified=no
monitor_success=86400
monitor_failure=3600
notify=echo
onsuccess='$notify "Connection to $1:$2 succeeded!"'
onfailure='$notify "Connection to $1:$2 failed!"'
nc='nc -w $timeout -v -z $1 $2 2>&1'
output=cat
command="$nc"

usage() {
  cat << EOF
NAME
       $(basename $0) - monitor connection to tcp server, or anything else

SYNOPSIS
       $(basename $0) [OPTION]... [<arg> ...]

DESCRIPTION
       Unless you specify something else to check (using the --command option
       below), this command will check tcp connection to <arg1> on port <arg2>
       every <--interval> seconds, run <--onfailure> command after <--failures>
       attempts, and forces re-notification after <--monitor> seconds.
       All the options below are then optional.

       -h, --help

       -l, --load-config <filename>
               Load configuration from file
               Options specified after -l will override loaded settings

       -i, --interval <$interval>
               Sleep interval between attempts

       -t, --timeout  <$timeout>
               Attempt timeout in seconds

       -f, --failures <$failures_threshold>
               Notify failure after specified failed attempts

       -s, --successes <$successes_threshold>
               Notify success after specified succeeded attempts

       -n, --notify-command <notify-send>
               Default command for default --onsuccess and --onfailure
               Variables of interest:
                 \$1                   - The "--onsuccess" or
                                         "--onfailure" message, evaluated
                 \$command_exit_code   - The exit code of --command
                 \$argv[]              - Command line parameters
                                        (see example configuration file below)

       -Y, --onsuccess <'\$notify "Connection to \$1:\$2 succeeded!"'>
               Command for notifying successful attempts.
               Can be set to empty string.

       -N, --onfailure <'\$notify "Connection to \$1:\$2 failed!"'>
               Command for notifying failed attempts.
               Can be set to empty string.

       -v, --verbose
               Report command output not only on status change

       -m, --monitor <86400>
                Seconds before success or failure re-notification
                -1: disable re-notifications

       -S, --monitor-success <$monitor_success>
                Seconds before success re-notification (overrides --monitor)
                -1: disable re-notifications

       -F, --monitor-failure <$monitor_failure>
                Seconds before failure re-notification (overrides --monitor)
                -1: disable re-notifications

       -c, --command <'nc -w \$timeout -v -z \$1 \$2 2>&1'>
                Command to run for checking whatever the check.
                When you change this for something where \$1 and \$2 means
                anything else than host:port you need to set -Y and -N.

       -o, --output <cat>
                Allow redirecting stdout and stderr
                eg:
                    -o logger
                or
                    -o 'ts "[%Y-%m-%d %H:%M:%S]"'

       -p, --pid-file <filename>
                Do not run the script if another process with matching command
                line is running with the same pid, else store the pid there.


CONFIGURATION FILE
       When file ~/.check-and-monitor.conf exists it is evaluated before
       command line options.
       Command line options override settings from ~/.check-and-monitor.conf.

       You can also specify a configuration file with -l|--load-config.
       Options specified after -l will override settings from the config file.

       DEFAULT CONFIGURATION:
           timeout=10
           interval=60
           failures_threshold=3
           successes_threshold=0
           monitor_success=86400
           monitor_failure=86400
           notify=echo
           onsuccess='\$notify "Connection to \$1:\$2 succeeded!"'
           onfailure='\$notify "Connection to \$1:\$2 failed!"'
           command='nc -w \$timeout -v -z \$1 \$2 2>&1'
           output=cat

       EXAMPLE CONFIGURATION FILE:
           # Send a mail to user@host on host un/reachable
           # with full traceroute output on failure,
           # and only the first gateway on success
           dest=user@host
           mail-send() {
               if [ \$command_exit_code -eq 0 ] ; then
                  msg=\$(traceroute -m 1 \${argv[0]})
                else
                  msg=\$(traceroute \${argv[0]})
               fi
               mail \$dest -s "\$1" <<< "msg"
             }
           notify=mail-send
           monitor_failure=900
           output=logger

       EXAMPLE CONFIGURATION FILE:
           # Restart wireguard tunnel after 3 failed pings through the tunnel.
           # Run with check-and-monitor -l <this-config> <wg0> <peer-ip>
           wg_restart() {
             IFACE=${argv[0]}
             ip link show $IFACE > /dev/null 2>&1 && wg-quick down $IFACE
             wg-quick up $IFACE
           }
           timeout=5
           failures_threshold=3
           successes_threshold=0
           monitor_success=-1
           monitor_failure=0
           onsuccess='echo "$1: host $2 is up!"'
           onfailure=wg_restart
           command='ping -c 1 -w $timeout ${argv[1]} 2>&1'

EOF
  exit 1
}

{
  [ -f ~/.check-and-monitor.conf ] && . ~/.check-and-monitor.conf

  # parse command line options
  if ! options=$(getopt -o l:hi:t:f:s:vm:S:F:n:Y:N:c:o:p: -l load-config:,help,interval:,timeout:,failures:,successes:,verbose,monitor:,monitor-success:,monitor-failure:,notify-command:,onsuccess:,onfailure:,command:,output:,pidfile: -- "$@")
  then
    # something went wrong, getopt will put out an error message for us
    exit 1
  fi

  eval set -- "$options"

  # for user scripts
  argv=()

  while [ $# -gt 0 ] ; do
    case $1 in
      -h|--help) usage ;;
      -l|--load-config) . "$2" ; shift ;;
      -i|--interval) interval=$2 ; shift ;;
      -t|--timeout) timeout=$2 ; shift ;;
      -f|--failures) failures_threshold=$2 ; shift ;;
      -s|--successes) successes_threshold=$2 ; shift ;;
      -v|--verbose) verbose=yes ;;
      -m|--monitor) monitor_success=$2 ; monitor_failure=$2 ; shift ;;
      -S|--monitor-success) monitor_success=$2 ; shift ;;
      -F|--monitor-failure) monitor_failure=$2 ; shift ;;
      -n|--notify-command) notify=$2 ; shift ;;
      -Y|--onsuccess) onsuccess=$2 ; shift ;;
      -N|--onfailure) onfailure=$2 ; shift ;;
      -c|--command) command=$2 ; shift ;;
      -o|--output) output=$2 ; shift ;;
      -p|--pid-file) pidfile=$2 ; shift ;;
        (--) shift; argv+=($@) ; break ;;
        (-*) echo "$(basename $0): error - unrecognized option $1" >&2; exit 1 ;;
        (*) argv+=($1) ; shift ;;
    esac
    shift
  done

  if [ "$command" = "$nc" ] ; then
    if [ $# -lt 2 ] ; then
      usage
      exit 1
    fi
  else
    echo "INFO: command line parameters: $@"
  fi

  if [ -f $pidfile ] ; then
    PID=$(cat $pidfile)
    # exit if PID is still running and script name matches ours somehow
    if kill -0 "$PID" 2> /dev/null &&
      [ -r /proc/$PID/cmdline ] &&
      xargs -0 echo < /proc/$PID/cmdline | grep -q $(basename $0)
    then
#       echo already running with pid $PID
       exit
    fi
  fi
  echo $$ > $pidfile

  check(){
    t0=$(date +%s.%N)
    result=$(eval $command)
    command_exit_code="$?"
    t1=$(date +%s.%N)
    t=$(bc <<< "$t1-$t0")
    status="$result ($(printf %f $t)s)"
    [ -n "$verbose" ] && echo $status
  }

  #set -x
  notified_at=0
  while true ; do
    now=$(date +%s)
    notified_since=$(expr $now - $notified_at)
    check "$@"
    if [ $command_exit_code -eq 0 ] ; then
      ((successes++))
      failures=0
      if [ $successes -ge $successes_threshold ] ; then
        [ $notified_since -gt $monitor_success ] && [ $monitor_success -ge 0 ] && notified=no
        if [ $hasfailed = yes -o $notified = no ] ; then
          [ -z "$verbose" ] && echo $status
          eval $onsuccess
          notify_exit_code=$?
          if [ $notify_exit_code -eq 0 ] ; then
            notified=yes
            notified_at=$(date +%s)
          else
            notified=no
            echo "ERROR: success notification failed ! ($notify_exit_code)" >& 2
          fi
        fi
        hasfailed=no
      fi
    else
      ((failures++))
      successes=0
      if [ $failures -ge $failures_threshold ] ; then
        [ $hasfailed != yes ] && notified=no
        [ $notified_since -gt $monitor_failure ] && [ $monitor_failure -ge 0 ] && notified=no
        if [ $notified = no ] ; then
          [ -z "$verbose" ] && echo $status
          eval $onfailure
          notify_exit_code=$?
          if [ $notify_exit_code -eq 0 ] ; then
            notified=yes
            notified_at=$(date +%s)
          else
            notified=no
            echo "ERROR: failure notification failed ! ($notify_exit_code)" >& 2
          fi
        fi
        hasfailed=yes
      fi
    fi
    sleep $interval
  done
} 2>&1 | sh -c "$output"

